IAccountService 是业务层的接口，负责操作账户。 模拟保存一名用户。
AccountServiceImpl 用来继承IAccountService，它是账务的业务层实现类。里面要添加保存用户的方法。
                    根据三层架构，业务层需要调用持久层，所以需要定义一个IAccountDao类，并new一个新的对象accountDao

IAccountDao是账户的持久层接口。模拟保存一名用户。
AccountDaoImpl 用来继承IAccountDao ，是持久层的实现类。里面要添加保存用户的方法。
               在操作的时候，直接打印。

Client 模拟一个表现层，用来调用业务层。
        里面调用BeanFactory去对bean.properties做处理，来降低类耦合。这就是工厂模式解耦！
        这里工厂模式会产生了一个问题：会产生多例的对象-<对象会被创建多次，执行效率没有单例对象高。>
        但是我们只想要单例，因为单例只被创建一次，从而类中的成员也就只会初始化一次。

       考虑此问题的背景：
       由于BeanFactory在创建对象的时候，使用了newInstance()。每次它都会调用默认构造函数创建对象。
       我们只需要调用它一次即可，于是就要调用完之后立即存储起来，不然由于java的垃圾机制，长时间不用就会被回收。

       解决方法：(工厂模式解耦的升级版)
       调用完后立即存储起来。
       首先需要在BeanFactory里用容器来存储（定义一个Map，用于存放我们要创建的对象，即为容器）。
       接下来在静态代码块中，不仅要得到properties，还要实例化容器，并取出配置文件中所有的Key。keys方法返回枚举类型。
       遍历枚举，取出每个Key，根据Key获取value，并通过反射创建对象。最后把key和value存入容器中。
